= SHORTCUTS SESSION

== 2023-09-05: Shortcut_24/01

Hey everyone! First shortcut of this new season. Sorry for the delay,
I was playing with another project but now is the time to code for
Erlang Punch and nostr I did only few small modification during the
past three months. I merged bech32 module (we'll see that in another
shortcut) and did some cleanup  but the project did not change a
lot. At least, we are still stuck on the same issues. Okay, let's
do that!

We were working on nip/05, I think had something that work, but we
will need to check that. Another project could be cool, something we
were talking on for many months: creating the message router. Oh!
I remember now! The link between nip/05 and the database was not
done. Do I want to work on that right now? Not sure. I don't even
remember how this part is working. Let start our pomodoro session.
No more talk ;)

Okay! We need a way to list active clients but it leads to...
database, in particular mnesia. Well, I feel hot to do some
mnesia! :)

So; first pomodoro done. I only updated some documentation and
started to play with mnesia. I don't really know how to deal
with the connection at this time. In fact, if we are starting
to use mnesia... Perhaps we should use it everywhere. I should
dissociate clients and users.

A client is an active connection to a server, and we should only have
one perhaps more if more users need to connect on it.

An user is using a client (so the connection) to receive and share
their information. In this case, we should have something like that:

 1. a new client is started, a client abstracts the connection
    between an user and the server.

 2. a new user want to use the connection/client, then it will share
    the same connection if it already exists or create it if not
    present.

 3. It become an active user.

Let works on the second part.

== 2023-09-05: Shortcut_24/02

Okay! That's the last one for tonight. It's hot out there, and it's
hard to think with this kind of weather. Adding mnesia is not a small
task and it will impact a lot of the implementation but based on the
big modification in many NIP, in particular NIP/01 and NIP/25, I will
need to use mnesia one day or another. What we did during these
shortcuts? Well... Documentation and a first step in the interface to
store clients state. That's a good thing for the first one.

 + created nostr@clients module
 + created interface to create, list and delete clients
 ~ added documentation
 ~ did some test to remember how this application was
   working...

See you next time friends; I need to drink some water. :')

== 2023-09-12: Shortcut_24/03

Hey everyone! Ready for a new shortcut session? Let's continue
working on nostr. Today, I was thinking on the current structure
of the application and all the mess I did during the last
shortcuts. I think I will merge all the previous branches
during the week and restart from a fresh branch. Anyway, last week
we were working with mnesia, we'll continue that for tonight.

  nostr_client_connection:start([{host, "nostr.sidnlabs.nl"}, {port, 443}]).

Okay, first session's over. When a new connection is created, its information
is now stored in mnesia (but also in process group). We don't want
to deal with the full id made of host, port, protocol (tls) and path, but
with want something to filter these elements from the database. This will
be the goal of the function `nostr@clients:get_client_by_host/1`.

I still think using process group and supervisor to store information could
be a good idea but it requires too much efforts. I will also probably
change the way arguments are passed. Instead of using proplists, I will
use some maps, better to do pattern matching, and more flexible.

 + can now list client
 + when connected, client is added in mnesia
 + when stopped, client is removed from mnesia
 ~ get client by hostname.
 ! change all datastructure used to pass argument

== 2023-09-12: Shortcut_24/04

I will stop for tonight. ~1h dedicated is enough. If I have
more time this week-end, perhaps doing a long session could
help me to fix all the mess I did :)

Anyway, we have now the function to get clients by their
hostname after a - very - long fight with match pattern,
a powerful feature, but hard to master. Next time, I use
`etf:fun2ms` to create a match pattern based on function!

 + create list_client_by_host/1
 ? the data structure used is not flexible enough.
 ! this module is dirty, a clean up is needed.

Well, it was a short live session, but I am also working
on other projects, and allocating 1h is already a bit
hard. If you are interested, I recently created an interface
using NIF to manage cozodb. To be honest, that's a really
nice project, and I will (perhaps) add it in nostr to
store data instead of mnesia. We'll see!

See you Friday for another paper session, if not, see
you next Tuesday! ;)

== 2023-09-19: Shortcut_24/05

We start this session earlier. Let continue to work on nostr! In this
session I clean up nostr_client_connection module I create months ago.
It was dirty and only for a PoC. A good program -- in my point of view
-- is made of small functions connected together, you can eventually
test on demand. Each steps are isolated and some errors can be
correctly designed. One function should only return one good result,
or at least not an infinity of results.

The state of the process should have only important information, but
in this case, I think I will play hard and store everything in it. The
goal is to have something working, not to optimize. If removing some
elements of the state is required, then we will do that in another
coding session.

== 2023-09-19: Shortcut_24/06

I will continue to clean up this code in this pomodoro. Every steps
are acting like a whole pipeline during the initialization
phase. Types are partially checked during this phase. notify functions
could be exported in another module to reuse this part of the code in
other modules. Only TLS connection is now supported, init_connection
function will need to be uncommented and updated like other functions.

clients are currently not removed from mnesia. It needs to be
uncommented as well. I think a delete notification can be created.

== 2023-09-19: Shortcut_24/07

Let continue! I will extend this session a little bit to understand
what happens to the host field in the state. It looks better! So, this
is over for tonight. We cleaned up nostr_client_client connection, but
this is not done yet. What's the idea behind that? Still put in its
one place each connection and isolated each elements. I need to
control a bit the data I'm sharing with this part of the code. Anyway,
interfaces did not change at all, so, that's cool! See you next week
for more nostr and erlang coding. ;)
